#input necessary libraries
library(klaR)
library(caret)
#read in data from data set
data = read.csv('pubfig_train_50000.txt', header = FALSE)
numTrials = 10
y = as.factor(data[,9])
X = data[,-9]
trainScores = array(dim = numTrials)
testScores = array(dim = numTrials)
for(i in 1:numTrials)
{
#split data in 80-20 test-train split
trainIdx = createDataPartition(y, p = 0.8, list = FALSE)
XTrain = X[trainIdx, ]
yTrain = y[trainIdx]
XTest = X[-trainIdx, ]
yTest = y[-trainIdx]
#train naive bayes classifier
model = train(XTrain, yTrain, 'nb', trControl = trainControl(method = 'cv', number = 10))
#predict on training and test data
decisionTrain = predict(model, newdata = XTrain)
decisionTest = predict(model, newdata = XTest)
numCorrectTrain = decisionTrain == yTrain
numCorrectTest = decisionTest == yTest
trainScores[i] = sum(numCorrectTrain)/length(numCorrectTrain)
testScores[i] = sum(numCorrectTest)/length(numCorrectTest)
}
trainAccuracy = mean(trainScores)
testAccuracy = mean(testScores)
print(paste("Train Accuracy: ", trainAccuracy))
print(paste("Test Accuracy: ", testAccuracy))
install.packages(klaR)
?install.packages
?install.packages(caret)
install.packages(caret)
install.packages('caret')
install.packages('klaR')
library(caret)
#input necessary libraries
library(klaR)
library(caret)
#read in data from data set
data = read.csv('pubfig_train_50000.txt', header = FALSE)
numTrials = 10
y = as.factor(data[,9])
X = data[,-9]
trainScores = array(dim = numTrials)
testScores = array(dim = numTrials)
for(i in 1:numTrials)
{
#split data in 80-20 test-train split
trainIdx = createDataPartition(y, p = 0.8, list = FALSE)
XTrain = X[trainIdx, ]
yTrain = y[trainIdx]
XTest = X[-trainIdx, ]
yTest = y[-trainIdx]
#train naive bayes classifier
model = train(XTrain, yTrain, 'nb', trControl = trainControl(method = 'cv', number = 10))
#predict on training and test data
decisionTrain = predict(model, newdata = XTrain)
decisionTest = predict(model, newdata = XTest)
numCorrectTrain = decisionTrain == yTrain
numCorrectTest = decisionTest == yTest
trainScores[i] = sum(numCorrectTrain)/length(numCorrectTrain)
testScores[i] = sum(numCorrectTest)/length(numCorrectTest)
}
trainAccuracy = mean(trainScores)
testAccuracy = mean(testScores)
print(paste("Train Accuracy: ", trainAccuracy))
print(paste("Test Accuracy: ", testAccuracy))
getwd()
setwd('Users/ryleyhiga/Documents/cs498df/hw3')
setwd("~/Documents/cs498df/hw3")
#input necessary libraries
library(klaR)
library(caret)
#read in data from data set
data = read.csv('pubfig_train_50000.txt', header = FALSE)
numTrials = 10
y = as.factor(data[,9])
X = data[,-9]
trainScores = array(dim = numTrials)
testScores = array(dim = numTrials)
for(i in 1:numTrials)
{
#split data in 80-20 test-train split
trainIdx = createDataPartition(y, p = 0.8, list = FALSE)
XTrain = X[trainIdx, ]
yTrain = y[trainIdx]
XTest = X[-trainIdx, ]
yTest = y[-trainIdx]
#train naive bayes classifier
model = train(XTrain, yTrain, 'nb', trControl = trainControl(method = 'cv', number = 10))
#predict on training and test data
decisionTrain = predict(model, newdata = XTrain)
decisionTest = predict(model, newdata = XTest)
numCorrectTrain = decisionTrain == yTrain
numCorrectTest = decisionTest == yTest
trainScores[i] = sum(numCorrectTrain)/length(numCorrectTrain)
testScores[i] = sum(numCorrectTest)/length(numCorrectTest)
}
trainAccuracy = mean(trainScores)
testAccuracy = mean(testScores)
print(paste("Train Accuracy: ", trainAccuracy))
print(paste("Test Accuracy: ", testAccuracy))
ls()
#input necessary libraries
library(klaR)
library(caret)
#read in data from data set
data = read.csv('pubfig_train_50000.txt', header = FALSE)
#input necessary libraries
library(klaR)
library(caret)
#read in data from data set
data = read.csv('pubfig_train_50000_pairs.txt', header = FALSE)
#input necessary libraries
library(klaR)
library(caret)
#read in data from data set
data = read.csv('pubfig_train_50000_pairs.txt', header = FALSE)
numTrials = 10
y = as.factor(data[,9])
X = data[,-9]
trainScores = array(dim = numTrials)
testScores = array(dim = numTrials)
for(i in 1:numTrials)
{
#split data in 80-20 test-train split
trainIdx = createDataPartition(y, p = 0.8, list = FALSE)
XTrain = X[trainIdx, ]
yTrain = y[trainIdx]
XTest = X[-trainIdx, ]
yTest = y[-trainIdx]
#train naive bayes classifier
model = train(XTrain, yTrain, 'nb', trControl = trainControl(method = 'cv', number = 10))
#predict on training and test data
decisionTrain = predict(model, newdata = XTrain)
decisionTest = predict(model, newdata = XTest)
numCorrectTrain = decisionTrain == yTrain
numCorrectTest = decisionTest == yTest
trainScores[i] = sum(numCorrectTrain)/length(numCorrectTrain)
testScores[i] = sum(numCorrectTest)/length(numCorrectTest)
}
trainAccuracy = mean(trainScores)
testAccuracy = mean(testScores)
print(paste("Train Accuracy: ", trainAccuracy))
print(paste("Test Accuracy: ", testAccuracy))
data.head()
data.head
head(data)
?read.csv
#input necessary libraries
library(klaR)
library(caret)
#read in data from data set
data = read.csv('pubfig_train_50000_pairs.txt', sep = '\t' header = FALSE)
#input necessary libraries
library(klaR)
library(caret)
#read in data from data set
data = read.csv('pubfig_train_50000_pairs.txt', sep = '\t', header = FALSE)
73*2+1
data.head
head(data)
data[1]
data[1,]
data[-1,].head
head(data[-1,])
data = read.csv('pubfig_train_50000_pairs.txt', sep = '\t', skip = 1, header = FALSE)
head(data)
numTrials = 10
y = as.factor(data[,1])
X = data[,-1]
head(y)
head(X)
trainScores = array(dim = numTrials)
testScores = array(dim = numTrials)
for(i in 1:numTrials)
{
#split data in 80-20 test-train split
trainIdx = createDataPartition(y, p = 0.8, list = FALSE)
XTrain = X[trainIdx, ]
yTrain = y[trainIdx]
XTest = X[-trainIdx, ]
yTest = y[-trainIdx]
#train naive bayes classifier
model = train(XTrain, yTrain, 'nb', trControl = trainControl(method = 'cv', number = 10))
#predict on training and test data
decisionTrain = predict(model, newdata = XTrain)
decisionTest = predict(model, newdata = XTest)
numCorrectTrain = decisionTrain == yTrain
numCorrectTest = decisionTest == yTest
trainScores[i] = sum(numCorrectTrain)/length(numCorrectTrain)
testScores[i] = sum(numCorrectTest)/length(numCorrectTest)
}
trainAccuracy = mean(trainScores)
testAccuracy = mean(testScores)
print(paste("Train Accuracy: ", trainAccuracy))
print(paste("Test Accuracy: ", testAccuracy))
install.packages('e1071', dependencies = TRUE)
trainScores = array(dim = numTrials)
testScores = array(dim = numTrials)
for(i in 1:numTrials)
{
#split data in 80-20 test-train split
trainIdx = createDataPartition(y, p = 0.8, list = FALSE)
XTrain = X[trainIdx, ]
yTrain = y[trainIdx]
XTest = X[-trainIdx, ]
yTest = y[-trainIdx]
#train naive bayes classifier
model = train(XTrain, yTrain, 'nb', trControl = trainControl(method = 'cv', number = 10))
#predict on training and test data
decisionTrain = predict(model, newdata = XTrain)
decisionTest = predict(model, newdata = XTest)
numCorrectTrain = decisionTrain == yTrain
numCorrectTest = decisionTest == yTest
trainScores[i] = sum(numCorrectTrain)/length(numCorrectTrain)
testScores[i] = sum(numCorrectTest)/length(numCorrectTest)
}
warnings()
#predict on training and test data
trainScores = array(dim = numTrials)
testScores = array(dim = numTrials)
for(i in 1:numTrials)
{
#split data in 80-20 test-train split
trainIdx = createDataPartition(y, p = 0.8, list = FALSE)
XTrain = X[trainIdx, ]
yTrain = y[trainIdx]
XTest = X[-trainIdx, ]
yTest = y[-trainIdx]
#train naive bayes classifier
model = train(XTrain, yTrain, 'nb', trControl = trainControl(method = 'cv', number = 10))
#predict on training and test data
decisionTrain = predict(model, newdata = XTrain)
decisionTest = predict(model, newdata = XTest)
numCorrectTrain = decisionTrain == yTrain
numCorrectTest = decisionTest == yTest
trainScores[i] = sum(numCorrectTrain)/length(numCorrectTrain)
testScores[i] = sum(numCorrectTest)/length(numCorrectTest)
}
warnings()
#input necessary libraries
library(klaR)
library(caret)
#read in data from data set
data = read.csv('pubfig_train_50000_pairs.txt', sep = '\t', skip = 1, header = FALSE)
numTrials = 1
y = as.factor(data[,1])
X = data[,-1]
trainScores = array(dim = numTrials)
testScores = array(dim = numTrials)
for(i in 1:numTrials)
{
#split data in 80-20 test-train split
trainIdx = createDataPartition(y, p = 0.8, list = FALSE)
XTrain = X[trainIdx, ]
yTrain = y[trainIdx]
XTest = X[-trainIdx, ]
yTest = y[-trainIdx]
#train naive bayes classifier
model = train(XTrain, yTrain, 'nb', trControl = trainControl(method = 'cv', number = 1))
#predict on training and test data
decisionTrain = predict(model, newdata = XTrain)
decisionTest = predict(model, newdata = XTest)
numCorrectTrain = decisionTrain == yTrain
numCorrectTest = decisionTest == yTest
trainScores[i] = sum(numCorrectTrain)/length(numCorrectTrain)
testScores[i] = sum(numCorrectTest)/length(numCorrectTest)
}
trainAccuracy = mean(trainScores)
testAccuracy = mean(testScores)
print(paste("Train Accuracy: ", trainAccuracy))
print(paste("Test Accuracy: ", testAccuracy))
#input necessary libraries
library(klaR)
library(caret)
#read in data from data set
data = read.csv('pubfig_train_50000_pairs.txt', sep = '\t', skip = 1, header = FALSE)
numTrials = 1
y = as.factor(data[,1])
X = data[,-1]
trainScores = array(dim = numTrials)
testScores = array(dim = numTrials)
for(i in 1:numTrials)
{
#split data in 80-20 test-train split
trainIdx = createDataPartition(y, p = 0.8, list = FALSE)
XTrain = X[trainIdx, ]
yTrain = y[trainIdx]
XTest = X[-trainIdx, ]
yTest = y[-trainIdx]
#train naive bayes classifier
model = train(XTrain, yTrain, 'nb', trControl = trainControl(method = 'cv', number = 1))
#predict on training and test data
decisionTrain = predict(model, newdata = XTrain)
decisionTest = predict(model, newdata = XTest)
numCorrectTrain = decisionTrain == yTrain
numCorrectTest = decisionTest == yTest
trainScores[i] = sum(numCorrectTrain)/length(numCorrectTrain)
testScores[i] = sum(numCorrectTest)/length(numCorrectTest)
}
trainAccuracy = mean(trainScores)
testAccuracy = mean(testScores)
print(paste("Train Accuracy: ", trainAccuracy))
print(paste("Test Accuracy: ", testAccuracy))
head(XTrain)
model = train(XTrain, yTrain, 'nb', trControl = trainControl(method = 'cv', number = 1))
model = train(XTrain, yTrain, 'nb', trControl = trainControl(method = 'cv', number = 2))
warnings()
