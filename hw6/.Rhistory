trainIdx = sample(1:n, round(n*split))
xTrain = as.matrix(data[trainIdx, -25])
yTrain = as.matrix(data[trainIdx, 25])
xTest = as.matrix(data[-trainIdx, -25])
yTest = as.matrix(data[-trainIdx, 25])
summary(xTest)
summary(yTest)
summary(yTrain)
# Build logistic regression with different regularization schemes
lasso = cv.glmnet(xTrain, yTrain, family = "binomial", alpha = 1)
ridge = cv.glmnet(xTrain, yTrain, family = "binomial", alpha = 0)
enet0.25 = cv.glmnet(xTrain, yTrain, family = "binomial", alpha = 0.25)
enet0.50 = cv.glmnet(xTrain, yTrain, family = "binomial", alpha = 0.50)
enet0.75 = cv.glmnet(xTrain, yTrain, family = "binomial", alpha = 0.75)
library(glmnet)
# Build logistic regression with different regularization schemes
lasso = cv.glmnet(xTrain, yTrain, family = "binomial", alpha = 1)
ridge = cv.glmnet(xTrain, yTrain, family = "binomial", alpha = 0)
enet0.25 = cv.glmnet(xTrain, yTrain, family = "binomial", alpha = 0.25)
enet0.50 = cv.glmnet(xTrain, yTrain, family = "binomial", alpha = 0.50)
enet0.75 = cv.glmnet(xTrain, yTrain, family = "binomial", alpha = 0.75)
plot(lasso)
lasso = cv.glmnet(xTrain, yTrain, family = "binomial", type.measure = "deviation", alpha = 1)
lasso = cv.glmnet(xTrain, yTrain, family = "binomial", type.measure = "deviance", alpha = 1)
plot(lasso)
lasso = cv.glmnet(xTrain, yTrain, family = "binomial", type.measure = "class", alpha = 1)
plot(lasso)
lasso = cv.glmnet(xTrain, yTrain, family = "binomial", type.measure = "class", alpha = 1)
ridge = cv.glmnet(xTrain, yTrain, family = "binomial", type.measure = "class", alpha = 0)
enet0.25 = cv.glmnet(xTrain, yTrain, family = "binomial", type.measure = "class", alpha = 0.25)
enet0.50 = cv.glmnet(xTrain, yTrain, family = "binomial", type.measure = "class", alpha = 0.50)
enet0.75 = cv.glmnet(xTrain, yTrain, family = "binomial", type.measure = "class", alpha = 0.75)
yLasso = predict(lasso, xTest, s = "lambda.min", type = "class")
yRidge = predict(ridge, xTest, s = "lambda.min", type = "class")
yEnet0.25 = predict(enet0.25, xTest, s = "lambda.min", type = "class")
yEnet0.50 = predict(enet0.50, xTest, s = "lambda.min", type = "class")
yEnet0.75 = predict(enet0.75, xTest, s = "lambda.min", type = "class")
summary(yLasso)
summary(yTest)
str(yLasso)
plot(yLasso)
summary(yLasso == yTest)
nrow(yTest)
lassoAccur = sum(yLasso == yTest)/nTest
ridgeAccur = sum(yRidge == yTest)/nTest
enetAccur0.25 = sum(yEnet0.25 == yTest)/nTest
enetAccur0.50 = sum(yEnet0.50 == yTest)/nTest
enetAccur0.75 = sum(yEnet0.75 == yTest)/nTest
nTest = nrow(yTest)
lassoAccur = sum(yLasso == yTest)/nTest
ridgeAccur = sum(yRidge == yTest)/nTest
enetAccur0.25 = sum(yEnet0.25 == yTest)/nTest
enetAccur0.50 = sum(yEnet0.50 == yTest)/nTest
enetAccur0.75 = sum(yEnet0.75 == yTest)/nTest
yNoreg = predict(lasso, xTest, s = 0, type = "class")
noregAccur = sum(yNoreg == yTest)/nTest
plot(lasso)
plot(ridge)
yNoreg = predict(ridge, xTest, s = 0, type = "class")
noregAccur = sum(yNoreg == yTest)/nTest
yNoreg = predict(lasso, xTest, s = 0, type = "class")
noregAccur = sum(yNoreg == yTest)/nTest
yNoreg = predict(enet0.25, xTest, s = 0, type = "class") #set lambda equal to 0 in order to turn off regularization
nTest = nrow(yTest)
noregAccur = sum(yNoreg == yTest)/nTest
yNoreg = predict(lasso, xTest, s = 0, type = "class") #set lambda equal to 0 in order to turn off regularization
yLasso = predict(lasso, xTest, s = "lambda.min", type = "class")
noregAccur = sum(yNoreg == yTest)/nTest
lassoAccur = sum(yLasso == yTest)/nTest
yNoreg = predict(enet0.50, xTest, s = 0, type = "class") #set lambda equal to 0 in order to turn off regularization
nTest = nrow(yTest)
noregAccur = sum(yNoreg == yTest)/nTest
library(caret)
confusionMatrix(yLasso, yTest)
noregAccur
lassoAccur
ridgeAccur
enetAccur0.25
enetAccur0.50
enetAccur0.75
lasso$lambda.min
ridge$lambda.min
enet0.25$lambda.min
enet0.50$lambda.min
enet0.75$lambda.min
str(lasso)
summary(coef(lasso, s = "lambda.min"))
plot(lasso)
library(glmnet)
library(MASS)
library(car)
#Import Dataset
data = read.csv("Geographical\ Original\ of\ Music/default_plus_chromatic_features_1059_tracks.txt", header = FALSE)
n = nrow(data)
split = 0.7
trainIdx = sample(1:n, round(n*split))
train = data[trainIdx, ]
test = data[-trainIdx, ]
ntest = nrow(test)
latitudeTrain = as.matrix(train[, 117])
longitudeTrain = as.matrix(train[, 118])
featuresTrain = as.matrix(train[, -c(117,118)])
latitudeTest = as.matrix(test[, 117])
longitudeTest = as.matrix(test[, 118])
featuresTest = as.matrix(test[, -c(117, 118)])
#Make simple linear model
latLm = lm(V117 ~ . - V117 - V118, data = train)
latLmEstimate = predict(latLm, test)
plot(latitudeTest, latLmEstimate)
latLmRes = latitudeTest - latLmEstimate #residuals
plot(latLmEstimate, latLmRes) #fitted value versus residuals
latLmMSE = sum((latLmRes)^2)/ntest
longLm = lm(V118 ~ . - V117 - V118, data = train)
longLmEstimate = predict(longLm, test)
plot(longitudeTest, longLmEstimate)
longLmRes = longitudeTest - longLmEstimate #residuals
plot(longLmEstimate, longLmRes) #fitted value versus residuals
longLmMSE = sum((longLmRes)^2)/ntest
#Test Box-Cox Transformation
trainBC = train
testBC = test
trainBC$V117 = train$V117 + 90
trainBC$V118 = train$V118 + 90
testBC$V117 = test$V117 + 90
testBC$V118 = test$V118 + 90
# Transform latitude with best lambda (box-cox NOT regularization constant)
latLambdas = boxcox(V117 ~ . - V117 - V118, data = trainBC, lambda = seq(0, 5, 0.1))
latMaxLambda = powerTransform(trainBC$V117)
trainBC$V117 = bcPower(trainBC$V117, latMaxLambda$lambda)
testBC$V117 = bcPower(testBC$V117, latMaxLambda$lambda)
# Linearly regress on transformed latitudes
latLmBC = lm(V117 ~ . - V117 - V118, data = trainBC)
latLmEstimateBC = predict(latLmBC, testBC)
plot(testBC$V117, latLmEstimateBC)
latLmRes = testBC$V117 - latLmEstimateBC
plot(latLmEstimateBC, latLmRes) #fitted value versus residuals
latLmBCMSE = sum((latLmRes)^2)/ntest
# Transform longitude with best lambda
longLambdas = boxcox(V118 ~ . - V117 - V118, data = trainBC, lambda = seq(0, 5, 0.1))
longMaxLambda = powerTransform(trainBC$V118)
trainBC$V118 = bcPower(trainBC$V118, longMaxLambda$lambda)
testBC$V118 = bcPower(testBC$V118, longMaxLambda$lambda)
# Linearly regress on transformed longitudes
longLmBC = lm(V118 ~ . - V117 - V118, data = trainBC)
longLmEstimateBC = predict(longLmBC, testBC)
plot(testBC$V118, longLmEstimateBC)
longLmRes = testBC$V118 - longLmEstimateBC
plot(longLmEstimateBC, latLmRes) #fitted value versus residuals
longLmBCMSE = sum((latLmRes)^2)/ntes
#Create regularized linear regression models for latitude
latLasso = cv.glmnet(featuresTrain, latitudeTrain, alpha = 1)
latRidge = cv.glmnet(featuresTrain, latitudeTrain, alpha = 0)
latElasticNet0.25 = cv.glmnet(featuresTrain, latitudeTrain, alpha = 0.25)
latElasticNet0.50 = cv.glmnet(featuresTrain, latitudeTrain, alpha = 0.50)
latElasticNet0.75 = cv.glmnet(featuresTrain, latitudeTrain, alpha = 0.75)
#Plot cross-validation of lambda parameters based on the mean-squared error
plot(latLasso)
plot(latRidge)
plot(latElasticNet0.25)
plot(latElasticNet0.50)
plot(latElasticNet0.75)
#Predict latitude using the different regularization schemes
latLassoEstimate = predict(latLasso, featuresTest, s = "lambda.min")
latRidgeEstimate = predict(latRidge, featuresTest, s = "lambda.min")
latElasticNetEstimate0.25 = predict(latElasticNet0.25, featuresTest, s = "lambda.min")
latElasticNetEstimate0.50 = predict(latElasticNet0.50, featuresTest, s = "lambda.min")
latElasticNetEstimate0.75 = predict(latElasticNet0.75, featuresTest, s = "lambda.min")
#Evaluate the MSE for regularized regression on latitude
latLassoMSE = sum((latitudeTest - latLassoEstimate)^2) / ntest
latRidgeMSE = sum((latitudeTest - latRidgeEstimate)^2) / ntest
latElasticNetMSE0.25 = sum((latitudeTest - latElasticNetEstimate0.25)^2) / ntest
latElasticNetMSE0.50 = sum((latitudeTest - latElasticNetEstimate0.50)^2) / ntest
latElasticNetMSE0.75 = sum((latitudeTest - latElasticNetEstimate0.75)^2) / ntest
#Create regularized linear regression for longitude
longLasso = cv.glmnet(featuresTrain, longitudeTrain, alpha = 1)
longRidge = cv.glmnet(featuresTrain, longitudeTrain, alpha = 0)
longElasticNet0.25 = cv.glmnet(featuresTrain, longitudeTrain, alpha = 0.25)
longElasticNet0.50 = cv.glmnet(featuresTrain, longitudeTrain, alpha = 0.50)
longElasticNet0.75 = cv.glmnet(featuresTrain, longitudeTrain, alpha = 0.75)
#Plot cross-validation of lambda parameters based on the mean-squared error
plot(longLasso)
plot(longRidge)
plot(longElasticNet0.25)
plot(longElasticNet0.50)
plot(longElasticNet0.75)
#Predict longitude using the different regularization schemes
longLassoEstimate = predict(longLasso, featuresTest, s = "lambda.min")
longRidgeEstimate = predict(longRidge, featuresTest, s = "lambda.min")
longElasticNetEstimate0.25 = predict(longElasticNet0.25, featuresTest, s = "lambda.min")
longElasticNetEstimate0.50 = predict(longElasticNet0.50, featuresTest, s = "lambda.min")
longElasticNetEstimate0.75 = predict(longElasticNet0.75, featuresTest, s = "lambda.min")
#Evaluate the MSE for regularized regression on latitude
longLassoMSE = sum((longitudeTest - longLassoEstimate)^2) / ntest
longRidgeMSE = sum((longitudeTest - longRidgeEstimate)^2) / ntest
longElasticNetMSE0.25 = sum((longitudeTest - longElasticNetEstimate0.25)^2) / ntest
longElasticNetMSE0.50 = sum((longitudeTest - longElasticNetEstimate0.50)^2) / ntest
longElasticNetMSE0.75 = sum((longitudeTest - longElasticNetEstimate0.75)^2) / ntest
plot(latLasso)
summary(coef(latLasso, s = "lambda.min"))
summary(coef(lasso, s = "lambda.min"))
str(coef(lasso, s = "lambda.min"))
str(coef(latLasso, s = "lambda.min"))
str(coef(lasso, s = "lambda.min"))
str(xTest)
str(xTrain)
str(coef(ridge, s = "lambda.min"))
str(coef(enet0.25, s = "lambda.min"))
str(coef(enet0.50, s = "lambda.min"))
str(coef(enet0.75, s = "lambda.min"))
str(coef(lasso, s = "lambda.min"))
yLasso = predict(lasso, xTest, s = "lambda.min", type = "class")
lasso = cv.glmnet(xTrain, yTrain, family = "binomial", type.measure = "class", alpha = 1)
str(coef(lasso, s = "lambda.min"))
plot(latLasso)
plot(lasso)
plot(latLasso)
plot(lasso)
plot(latLmEstimate, latLmRes) #fitted value versus residuals
library(glmnet)
library(MASS)
library(car)
#Import Dataset
data = read.csv("Geographical\ Original\ of\ Music/default_plus_chromatic_features_1059_tracks.txt", header = FALSE)
n = nrow(data)
split = 0.7
trainIdx = sample(1:n, round(n*split))
train = data[trainIdx, ]
test = data[-trainIdx, ]
ntest = nrow(test)
latitudeTrain = as.matrix(train[, 117])
longitudeTrain = as.matrix(train[, 118])
featuresTrain = as.matrix(train[, -c(117,118)])
latitudeTest = as.matrix(test[, 117])
longitudeTest = as.matrix(test[, 118])
featuresTest = as.matrix(test[, -c(117, 118)])
#Make simple linear model
latLm = lm(V117 ~ . - V117 - V118, data = train)
latLmEstimate = predict(latLm, test)
plot(latitudeTest, latLmEstimate)
latLmRes = latitudeTest - latLmEstimate #residuals
plot(latLmEstimate, latLmRes) #fitted value versus residuals
latLmMSE = sum((latLmRes)^2)/ntest
longLm = lm(V118 ~ . - V117 - V118, data = train)
longLmEstimate = predict(longLm, test)
plot(longitudeTest, longLmEstimate)
longLmRes = longitudeTest - longLmEstimate #residuals
plot(longLmEstimate, longLmRes) #fitted value versus residuals
longLmMSE = sum((longLmRes)^2)/ntest
plot(longLmEstimate, longLmRes, main = "Residuals Versus Fitted Values for Longitudinal Simple Regression",
xlab = "Fitted Values", ylab = "Residuals") #fitted value versus residuals
plot(longLmEstimate, longLmRes, main = "Longitudinal Simple Regression Residuals",
xlab = "Fitted Values", ylab = "Residuals") #fitted value versus residuals
plot(latLmEstimate, latLmRes, main = "Latitudinal Simple Regression Residuals",
xlab = "Fitted Values", ylab = "Residuals") #fitted value versus residuals
# Transform latitude with best lambda (box-cox NOT regularization constant)
latLambdas = boxcox(V117 ~ . - V117 - V118, data = trainBC, lambda = seq(0, 5, 0.1))
latMaxLambda = powerTransform(trainBC$V117)
trainBC$V117 = bcPower(trainBC$V117, latMaxLambda$lambda)
testBC$V117 = bcPower(testBC$V117, latMaxLambda$lambda)
# Linearly regress on transformed latitudes
latLmBC = lm(V117 ~ . - V117 - V118, data = trainBC)
latLmEstimateBC = predict(latLmBC, testBC)
plot(testBC$V117, latLmEstimateBC)
latLmRes = testBC$V117 - latLmEstimateBC
plot(latLmEstimateBC, latLmRes, main = "Latitudinal Simple Regression Residuals",
xlab = "Fitted Values", ylab = "Residuals") #fitted value versus residuals
latLmBCMSE = sum((latLmRes)^2)/ntest
# Linearly regress on transformed latitudes
latLmBC = lm(V117 ~ . - V117 - V118, data = trainBC)
latLmEstimateBC = predict(latLmBC, testBC)
plot(testBC$V117, latLmEstimateBC)
latLmRes = testBC$V117 - latLmEstimateBC
plot(latLmEstimateBC, latLmRes, main = "Latitudinal Box-Cox Regression Residuals",
xlab = "Fitted Values", ylab = "Residuals") #fitted value versus residuals
latLmBCMSE = sum((latLmRes)^2)/ntest
latLambdas = boxcox(V117 ~ . - V117 - V118, data = trainBC, lambda = seq(0, 5, 0.1))
latMaxLambda = powerTransform(trainBC$V117)
trainBC$V117 = bcPower(trainBC$V117, latMaxLambda$lambda)
testBC$V117 = bcPower(testBC$V117, latMaxLambda$lambda)
latMaxLambda
longLambdas = boxcox(V118 ~ . - V117 - V118, data = trainBC, lambda = seq(0, 5, 0.1))
longMaxLambda = powerTransform(trainBC$V118)
trainBC$V118 = bcPower(trainBC$V118, longMaxLambda$lambda)
testBC$V118 = bcPower(testBC$V118, longMaxLambda$lambda)
library(glmnet)
library(MASS)
library(car)
#Import Dataset
data = read.csv("Geographical\ Original\ of\ Music/default_plus_chromatic_features_1059_tracks.txt", header = FALSE)
n = nrow(data)
split = 0.7
trainIdx = sample(1:n, round(n*split))
train = data[trainIdx, ]
test = data[-trainIdx, ]
ntest = nrow(test)
latitudeTrain = as.matrix(train[, 117])
longitudeTrain = as.matrix(train[, 118])
featuresTrain = as.matrix(train[, -c(117,118)])
latitudeTest = as.matrix(test[, 117])
longitudeTest = as.matrix(test[, 118])
featuresTest = as.matrix(test[, -c(117, 118)])
#Make simple linear model
latLm = lm(V117 ~ . - V117 - V118, data = train)
latLmEstimate = predict(latLm, test)
plot(latitudeTest, latLmEstimate)
latLmRes = latitudeTest - latLmEstimate #residuals
plot(latLmEstimate, latLmRes, main = "Latitudinal Simple Regression Residuals",
xlab = "Fitted Values", ylab = "Residuals") #fitted value versus residuals
latLmMSE = sum((latLmRes)^2)/ntest
longLm = lm(V118 ~ . - V117 - V118, data = train)
longLmEstimate = predict(longLm, test)
plot(longitudeTest, longLmEstimate)
longLmRes = longitudeTest - longLmEstimate #residuals
plot(longLmEstimate, longLmRes, main = "Longitudinal Simple Regression Residuals",
xlab = "Fitted Values", ylab = "Residuals") #fitted value versus residuals
longLmMSE = sum((longLmRes)^2)/ntest
#Test Box-Cox Transformation
trainBC = train
testBC = test
trainBC$V117 = train$V117 + 90
trainBC$V118 = train$V118 + 90
testBC$V117 = test$V117 + 90
testBC$V118 = test$V118 + 90
# Transform latitude with best lambda (box-cox NOT regularization constant)
latLambdas = boxcox(V117 ~ . - V117 - V118, data = trainBC, lambda = seq(0, 5, 0.1))
latMaxLambda = powerTransform(trainBC$V117)
trainBC$V117 = bcPower(trainBC$V117, latMaxLambda$lambda)
testBC$V117 = bcPower(testBC$V117, latMaxLambda$lambda)
# Linearly regress on transformed latitudes
latLmBC = lm(V117 ~ . - V117 - V118, data = trainBC)
latLmEstimateBC = predict(latLmBC, testBC)
plot(testBC$V117, latLmEstimateBC)
latLmRes = testBC$V117 - latLmEstimateBC
plot(latLmEstimateBC, latLmRes, main = "Latitudinal Box-Cox Regression Residuals",
xlab = "Fitted Values", ylab = "Residuals") #fitted value versus residuals
latLmBCMSE = sum((latLmRes)^2)/ntest
latLambdas = boxcox(V117 ~ . - V117 - V118, data = trainBC, lambda = seq(0, 5, 0.1))
latMaxLambda = powerTransform(trainBC$V117)
trainBC$V117 = bcPower(trainBC$V117, latMaxLambda$lambda)
testBC$V117 = bcPower(testBC$V117, latMaxLambda$lambda)
latMaxLambda
trainBC = train
testBC = test
trainBC$V117 = train$V117 + 90
trainBC$V118 = train$V118 + 90
testBC$V117 = test$V117 + 90
testBC$V118 = test$V118 + 90
# Transform latitude with best lambda (box-cox NOT regularization constant)
latLambdas = boxcox(V117 ~ . - V117 - V118, data = trainBC, lambda = seq(0, 5, 0.1))
latMaxLambda = powerTransform(trainBC$V117)
trainBC$V117 = bcPower(trainBC$V117, latMaxLambda$lambda)
testBC$V117 = bcPower(testBC$V117, latMaxLambda$lambda)
latLambdas = boxcox(V117 ~ . - V117 - V118, data = trainBC, lambda = seq(0, 5, 0.1))
latMaxLambda = powerTransform(trainBC$V117)
trainBC$V117 = bcPower(trainBC$V117, latMaxLambda$lambda)
testBC$V117 = bcPower(testBC$V117, latMaxLambda$lambda)
#Test Box-Cox Transformation
trainBC = train
testBC = test
trainBC$V117 = train$V117 + 90
trainBC$V118 = train$V118 + 90
testBC$V117 = test$V117 + 90
testBC$V118 = test$V118 + 90
# Transform latitude with best lambda (box-cox NOT regularization constant)
latLambdas = boxcox(V117 ~ . - V117 - V118, data = trainBC, lambda = seq(0, 5, 0.1))
latMaxLambda = powerTransform(trainBC$V117)
trainBC$V117 = bcPower(trainBC$V117, latMaxLambda$lambda)
testBC$V117 = bcPower(testBC$V117, latMaxLambda$lambda)
latLambdas = boxcox(V117 ~ . - V117 - V118, data = trainBC, lambda = seq(0, 5, 0.1))
trainBC = train
testBC = test
trainBC$V117 = train$V117 + 90
trainBC$V118 = train$V118 + 90
testBC$V117 = test$V117 + 90
testBC$V118 = test$V118 + 90
# Transform latitude with best lambda (box-cox NOT regularization constant)
latLambdas = boxcox(V117 ~ . - V117 - V118, data = trainBC, lambda = seq(0, 5, 0.1))
latMaxLambda = powerTransform(trainBC$V117)
trainBC$V117 = bcPower(trainBC$V117, latMaxLambda$lambda)
testBC$V117 = bcPower(testBC$V117, latMaxLambda$lambda)
# Transform longitude with best lambda
longLambdas = boxcox(V118 ~ . - V117 - V118, data = trainBC, lambda = seq(0, 5, 0.1))
longMaxLambda = powerTransform(trainBC$V118)
trainBC$V118 = bcPower(trainBC$V118, longMaxLambda$lambda)
testBC$V118 = bcPower(testBC$V118, longMaxLambda$lambda)
longLambda
longMaxLambda
latMaxLambda
# Linearly regress on transformed latitudes
latLmBC = lm(V117 ~ . - V117 - V118, data = trainBC)
latLmEstimateBC = predict(latLmBC, testBC)
plot(testBC$V117, latLmEstimateBC)
latLmRes = testBC$V117 - latLmEstimateBC
plot(latLmEstimateBC, latLmRes, main = "Latitudinal Box-Cox Regression Residuals",
xlab = "Fitted Values", ylab = "Residuals") #fitted value versus residuals
latLmBCMSE = sum((latLmRes)^2)/ntest
longLmBC = lm(V118 ~ . - V117 - V118, data = trainBC)
longLmEstimateBC = predict(longLmBC, testBC)
plot(testBC$V118, longLmEstimateBC)
longLmRes = testBC$V118 - longLmEstimateBC
plot(longLmEstimateBC, longLmRes) #fitted value versus residuals
longLmBCMSE = sum((longLmRes)^2)/ntes
longLmBC = lm(V118 ~ . - V117 - V118, data = trainBC)
longLmEstimateBC = predict(longLmBC, testBC)
plot(testBC$V118, longLmEstimateBC)
longLmRes = testBC$V118 - longLmEstimateBC
plot(longLmEstimateBC, longLmRes, main = "Longitudinal Box-Cox Regression Residuals",
xlab = "Fitted Values", ylab = "Residuals") #fitted value versus residuals
longLmBCMSE = sum((longLmRes)^2)/ntes
longLambdas = boxcox(V118 ~ . - V117 - V118, data = trainBC, lambda = seq(0, 5, 0.1))
longMaxLambda = powerTransform(trainBC$V118)
trainBC$V118 = bcPower(trainBC$V118, longMaxLambda$lambda)
testBC$V118 = bcPower(testBC$V118, longMaxLambda$lambda)
# Linearly regress on transformed longitudes
longLmBC = lm(V118 ~ . - V117 - V118, data = trainBC)
longLmEstimateBC = predict(longLmBC, testBC)
plot(testBC$V118, longLmEstimateBC)
longLmRes = testBC$V118 - longLmEstimateBC
plot(longLmEstimateBC, longLmRes, main = "Longitudinal Box-Cox Regression Residuals",
xlab = "Fitted Values", ylab = "Residuals") #fitted value versus residuals
longLmBCMSE = sum((longLmRes)^2)/ntes
latLambdas = boxcox(V117 ~ . - V117 - V118, data = trainBC, lambda = seq(0, 5, 0.1))
latMaxLambda = powerTransform(trainBC$V117)
trainBC$V117 = bcPower(trainBC$V117, latMaxLambda$lambda)
testBC$V117 = bcPower(testBC$V117, latMaxLambda$lambda)
# Linearly regress on transformed latitudes
latLmBC = lm(V117 ~ . - V117 - V118, data = trainBC)
latLmEstimateBC = predict(latLmBC, testBC)
plot(testBC$V117, latLmEstimateBC)
latLmRes = testBC$V117 - latLmEstimateBC
plot(latLmEstimateBC, latLmRes, main = "Latitudinal Box-Cox Regression Residuals",
xlab = "Fitted Values", ylab = "Residuals") #fitted value versus residuals
latLmBCMSE = sum((latLmRes)^2)/ntest
longLmBC = lm(V118 ~ . - V117 - V118, data = trainBC)
longLmEstimateBC = predict(longLmBC, testBC)
plot(testBC$V118, longLmEstimateBC)
longLmRes = testBC$V118 - longLmEstimateBC
plot(longLmEstimateBC, longLmRes, main = "Longitudinal Box-Cox Regression Residuals",
xlab = "Fitted Values", ylab = "Residuals") #fitted value versus residuals
longLmBCMSE = sum((longLmRes)^2)/ntes
40^3
80^3
x1 = c(10, 8, 13, 9, 11, 14, 6, 4, 12, 7, 5)
y1 = c(8.04, 6.95, 7.58, 8.81, 8.33, 9.96, 7.24, 4.26, 10.84, 4.82, 5.68)
y1.estimate = 3+0.5*x1
x2 = c(10, 8, 13, 9, 11, 14, 6, 4, 12, 7, 5)
y2 = c(9.14, 8.14, 8.74, 8.77, 9.26, 8.10, 6.13, 3.10, 9.13, 7.26, 4.74)
y2.estimate = 3+0.5*x2
sum((y1.estimate-y1)^2)/11
sum((y2.estimate-y2)^2)/11
x3 = c(10, 8, 13, 9, 11, 14, 6, 4, 12, 7, 5)
y3 = c(7.46, 6.77, 12.74, 7.11, 7.81, 8.84, 6.08, 5.39, 8.15, 6.42, 5.73)
y3.estimate = 3+0.5*x3
sum((y3.estimate-y3)^2)/11
x1 = c(10, 8, 13, 9, 11, 14, 6, 4, 12, 7, 5)
y1 = c(8.04, 6.95, 7.58, 8.81, 8.33, 9.96, 7.24, 4.26, 10.84, 4.82, 5.68)
y1.estimate = 3+0.5*x1
x2 = c(10, 8, 13, 9, 11, 14, 6, 4, 12, 7, 5)
y2 = c(9.14, 8.14, 8.74, 8.77, 9.26, 8.10, 6.13, 3.10, 9.13, 7.26, 4.74)
y2.estimate = 3+0.5*x2
x3 = c(10, 8, 13, 9, 11, 14, 6, 4, 12, 7, 5)
y3 = c(7.46, 6.77, 12.74, 7.11, 7.81, 8.84, 6.08, 5.39, 8.15, 6.42, 5.73)
y3.estimate = 3+0.5*x3
x4 = c(8, 8, 8, 8, 8, 8, 8, 19, 8, 8, 8)
y4 = c(6.58, 5.76, 7.71, 8.84, 8.47, 7.04, 5.25, 12.5, 5.56, 7.91, 6.89)
y4.estimate = 3+0.5*x4
sum((y4.estimate-y4)^2)/11
sum((y4.estimate-y4)^2)/11
plot(latLassoEstimate, latitudeTest - latLassoEstimate)
plot(latLassoEstimate, latitudeTest - latLassoEstimate, main = "Lasso Residuals Over Fitted Values", xlab = "Fitted Values", ylab = "Residuals")
plot(latLassoEstimate, latitudeTest - latLassoEstimate, main = "Latitudinal Lasso Residuals", xlab = "Fitted Values", ylab = "Residuals")
plot(latRidgeEstimate, latitudeTest - latRidgeEstimate, main = "Latitudinal Ridge Residuals", xlab = "Fitted Values", ylab = "Residuals")
par(mfrow=c(2,3))
plot(latLmEstimate, latitudeTest - latLmEstimate, main = "Latitudinal No Regularization Residuals", xlab = "Fitted Values", ylab = "Residuals")
plot(latLassoEstimate, latitudeTest - latLassoEstimate, main = "Latitudinal Lasso Residuals", xlab = "Fitted Values", ylab = "Residuals")
plot(latRidgeEstimate, latitudeTest - latRidgeEstimate, main = "Latitudinal Ridge Residuals", xlab = "Fitted Values", ylab = "Residuals")
plot(latElasticNetEstimate0.25, latitudeTest - latElasticNetEstimate0.25, main = "Latitudinal Elastic Net (Alpha = 0.25)", xlab = "Fitted Values", ylab = "Residuals")
#subplots in R
par(mfrow=c(2,3))
plot(latLmEstimate, latitudeTest - latLmEstimate, main = "Latitudinal No Regularization Residuals", xlab = "Fitted Values", ylab = "Residuals")
plot(latLassoEstimate, latitudeTest - latLassoEstimate, main = "Latitudinal Lasso", xlab = "Fitted Values", ylab = "Residuals")
plot(latRidgeEstimate, latitudeTest - latRidgeEstimate, main = "Latitudinal Ridge", xlab = "Fitted Values", ylab = "Residuals")
plot(latElasticNetEstimate0.25, latitudeTest - latElasticNetEstimate0.25, main = "Latitudinal Elastic Net 0.25", xlab = "Fitted Values", ylab = "Residuals")
plot(latElasticNetEstimate0.50, latitudeTest - latElasticNetEstimate0.50, main = "Latitudinal Elastic Net 0.50", xlab = "Fitted Values", ylab = "Residuals")
plot(latElasticNetEstimate0.75, latitudeTest - latElasticNetEstimate0.75, main = "Latitudinal Elastic Net 0.75", xlab = "Fitted Values", ylab = "Residuals")
#subplots in R
par(mfrow=c(2,3))
plot(latLmEstimate, latitudeTest - latLmEstimate, main = "Latitudinal No Regularization", xlab = "Fitted Values", ylab = "Residuals")
plot(latLassoEstimate, latitudeTest - latLassoEstimate, main = "Latitudinal Lasso", xlab = "Fitted Values", ylab = "Residuals")
plot(latRidgeEstimate, latitudeTest - latRidgeEstimate, main = "Latitudinal Ridge", xlab = "Fitted Values", ylab = "Residuals")
plot(latElasticNetEstimate0.25, latitudeTest - latElasticNetEstimate0.25, main = "Latitudinal Elastic Net 0.25", xlab = "Fitted Values", ylab = "Residuals")
plot(latElasticNetEstimate0.50, latitudeTest - latElasticNetEstimate0.50, main = "Latitudinal Elastic Net 0.50", xlab = "Fitted Values", ylab = "Residuals")
plot(latElasticNetEstimate0.75, latitudeTest - latElasticNetEstimate0.75, main = "Latitudinal Elastic Net 0.75", xlab = "Fitted Values", ylab = "Residuals")
#subplots in R
par(mfrow=c(2,3))
plot(latLmEstimate, latitudeTest - latLmEstimate, main = "Latitudinal No Reg", xlab = "Fitted Values", ylab = "Residuals")
plot(latLassoEstimate, latitudeTest - latLassoEstimate, main = "Latitudinal Lasso", xlab = "Fitted Values", ylab = "Residuals")
plot(latRidgeEstimate, latitudeTest - latRidgeEstimate, main = "Latitudinal Ridge", xlab = "Fitted Values", ylab = "Residuals")
plot(latElasticNetEstimate0.25, latitudeTest - latElasticNetEstimate0.25, main = "Latitudinal Elastic Net 0.25", xlab = "Fitted Values", ylab = "Residuals")
plot(latElasticNetEstimate0.50, latitudeTest - latElasticNetEstimate0.50, main = "Latitudinal Elastic Net 0.50", xlab = "Fitted Values", ylab = "Residuals")
plot(latElasticNetEstimate0.75, latitudeTest - latElasticNetEstimate0.75, main = "Latitudinal Elastic Net 0.75", xlab = "Fitted Values", ylab = "Residuals")
#subplots in R
par(mfrow=c(2,3))
plot(longLmEstimate, longitudeTest - longLmEstimate, main = "Longitudinal No Reg", xlab = "Fitted Values", ylab = "Residuals")
plot(longLassoEstimate, longitudeTest - longLassoEstimate, main = "Longitudinal Lasso", xlab = "Fitted Values", ylab = "Residuals")
plot(longRidgeEstimate, longitudeTest - longRidgeEstimate, main = "Longitudinal Ridge", xlab = "Fitted Values", ylab = "Residuals")
plot(longElasticNetEstimate0.25, longitudeTest - longElasticNetEstimate0.25, main = "Longitudinal Elastic Net 0.25", xlab = "Fitted Values", ylab = "Residuals")
plot(longElasticNetEstimate0.50, longitudeTest - longElasticNetEstimate0.50, main = "Longitudinal Elastic Net 0.50", xlab = "Fitted Values", ylab = "Residuals")
plot(longElasticNetEstimate0.75, longitudeTest - longElasticNetEstimate0.75, main = "Longitudinal Elastic Net 0.75", xlab = "Fitted Values", ylab = "Residuals")
(0.75)^2
0.5625*0.25
(0.25)^2*0.75
